scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean)*1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 14, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 5))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean)*1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 14, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 7))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean)*1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 14, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 0))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean)*1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 14, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 5))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
#scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 6))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 14))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Hosps7, color = "Hospitalisations")) +
geom_line(aes(y = Wastewaterip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("Hospitalisation occupancy" = "orange", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "Hospital bed occupancy (orange)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "Hospitalisations and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
# Create a new tibble with the sequence of dates
date_tibble <- tibble(Date = date_sequence)
combined_data <- date_tibble %>%
full_join(select(hosps, Date, SevenDayAverage), by = "Date") %>%
full_join(wastewater, by = "Date") %>%
arrange(Date)
names(combined_data) <- c('Date', 'Hosps', 'Wastewater')
# Replace NA values with linearly interpolated values based on existing 'Date' and 'Value'
combined_data$Wastewaterip <- na.approx(combined_data$Wastewater, combined_data$Date, na.rm = FALSE)
combined_data$Hosps7 <- rollapply(combined_data$Hosps, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data <- combined_data %>%
select(Date, Wastewaterip, Hosps7) %>%
# Exclude rows with NAs
filter(!if_any(c(Date, Wastewaterip, Hosps7), ~is.na(.x) | is.nan(.x)))
#Now plot them together
# Calculate a factor for scaling
max_wastewater <- max(combined_data$Wastewaterip, na.rm = TRUE)
max_ons_infections <- max(combined_data$Hosps7, na.rm = TRUE)
factor <- max_wastewater / max_ons_infections
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Hosps7, color = "Hospitalisations")) +
geom_line(aes(y = Wastewaterip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("Hospitalisation occupancy" = "orange", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "Hospital bed occupancy (orange)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "Hospitalisations and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Hosps7, color = "Hospitalisations")) +
geom_line(aes(y = Wastewaterip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("Hospitalisation occupancy" = "blue", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "Hospital bed occupancy (orange)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "Hospitalisations and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Hosps7, color = "Hospitalisation occupancy")) +
geom_line(aes(y = Wastewaterip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("Hospitalisation occupancy" = "orange", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "Hospital bed occupancy (orange)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "Hospitalisations and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") + # Add the line layer
scale_y_log10() +
theme_minimal() + # Use a minimal theme
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2023-11-01")))
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01")))
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 7))
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 7))
# Find the minimum and maximum dates
min_date <- min(wastewater$Date, na.rm = TRUE)
max_date <- max(wastewater$Date, na.rm = TRUE)
# Generate the sequence of dates
date_sequence <- seq.Date(from = min_date, to = max_date, by = "day")
# Create a new tibble with the sequence of dates
date_tibble <- tibble(Date = date_sequence)
combined_data <- date_tibble %>%
full_join(wastewater, by = "Date") %>%
full_join(select(ons_prevalence, Date, c(names(ons_prevalence)[5], names(ons_prevalence)[6], names(ons_prevalence)[7])), by = "Date") %>%
arrange(Date)
names(combined_data) <- c('Date', 'Wastewater7days', 'ONSinfections', 'lc', 'uc')
# Replace NA values with linearly interpolated values based on existing 'Date' and 'Value'
combined_data$ONSinfectionsip <- na.approx(combined_data$ONSinfections, combined_data$Date, na.rm = FALSE)
combined_data$Wastewater7daysip <- na.approx(combined_data$Wastewater7days, combined_data$Date, na.rm = FALSE)
combined_data$uc <- na.approx(combined_data$uc, combined_data$Date, na.rm = FALSE)
combined_data$lc <- na.approx(combined_data$lc, combined_data$Date, na.rm = FALSE)
combined_data$ONSinfections7daysip <- rollapply(combined_data$ONSinfectionsip, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data$uc <- rollapply(combined_data$uc, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data$lc <- rollapply(combined_data$lc, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data <- combined_data %>%
select(Date, Wastewater7daysip, ONSinfections7daysip, uc, lc) %>%
# Exclude rows with NAs
filter(!if_any(c(Date, Wastewater7daysip, ONSinfections7daysip), ~is.na(.x) | is.nan(.x)))
#And plot the result
ggplot(combined_data, aes(x = Date)) +
geom_ribbon(aes(ymin = lc, ymax = uc), fill = "blue", alpha = 0.2) +
geom_line(aes(y = ONSinfections7daysip), color = "blue") +
theme_minimal() +
labs(x = "Date", y = "Value", title = "Ribbon Plot with Central, Upper, and Lower Range Values")
#Now plot them together
# Calculate a factor for scaling
max_wastewater <- max(combined_data$Wastewater7daysip, na.rm = TRUE)
max_ons_infections <- max(combined_data$ONSinfections7daysip, na.rm = TRUE)
factor <- max_wastewater / max_ons_infections
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_ribbon(aes(ymin = lc, ymax = uc), fill = "blue", alpha = 0.2) +
geom_line(aes(y = ONSinfections7daysip, color = "ONS Infections")) +
geom_line(aes(y = Wastewater7daysip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("ONS Infections" = "blue", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "ONS prevalence 7-day average (blue)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "ONS Infections and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 7))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection, 21 day smoothed")
# Print the plot
print(q)
combined_data <- date_tibble %>%
full_join(wastewater, by = "Date") %>%
full_join(select(ons_prevalence, Date, c(names(ons_prevalence)[5], names(ons_prevalence)[6], names(ons_prevalence)[7])), by = "Date") %>%
arrange(Date)
names(combined_data) <- c('Date', 'Wastewater7days', 'ONSinfections', 'lc', 'uc')
# Replace NA values with linearly interpolated values based on existing 'Date' and 'Value'
combined_data$ONSinfectionsip <- na.approx(combined_data$ONSinfections, combined_data$Date, na.rm = FALSE)
combined_data$Wastewater7daysip <- na.approx(combined_data$Wastewater7days, combined_data$Date, na.rm = FALSE)
combined_data$uc <- na.approx(combined_data$uc, combined_data$Date, na.rm = FALSE)
combined_data$lc <- na.approx(combined_data$lc, combined_data$Date, na.rm = FALSE)
combined_data$ONSinfections7daysip <- rollapply(combined_data$ONSinfectionsip, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data$uc <- rollapply(combined_data$uc, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data$lc <- rollapply(combined_data$lc, width = 7, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
combined_data <- combined_data %>%
select(Date, Wastewater7daysip, ONSinfections7daysip, uc, lc) %>%
# Exclude rows with NAs
filter(!if_any(c(Date, Wastewater7daysip, ONSinfections7daysip), ~is.na(.x) | is.nan(.x)))
#And plot the result
ggplot(combined_data, aes(x = Date)) +
geom_ribbon(aes(ymin = lc, ymax = uc), fill = "blue", alpha = 0.2) +
geom_line(aes(y = ONSinfections7daysip), color = "blue") +
theme_minimal() +
labs(x = "Date", y = "Value", title = "Ribbon Plot with Central, Upper, and Lower Range Values")
#Now plot them together
# Calculate a factor for scaling
max_wastewater <- max(combined_data$Wastewater7daysip, na.rm = TRUE)
max_ons_infections <- max(combined_data$ONSinfections7daysip, na.rm = TRUE)
factor <- max_wastewater / max_ons_infections
# Create the base plot with the adjusted axes
p <- ggplot(combined_data, aes(x = Date)) +
geom_ribbon(aes(ymin = lc, ymax = uc), fill = "blue", alpha = 0.2) +
geom_line(aes(y = ONSinfections7daysip, color = "ONS Infections")) +
geom_line(aes(y = Wastewater7daysip / factor, color = "Wastewater Levels")) +
scale_color_manual(values = c("ONS Infections" = "blue", "Wastewater Levels" = "red")) +
scale_y_continuous(
name = "ONS prevalence 7-day average (blue)",
labels = comma, # Use the scales package to format labels without scientific notation
sec.axis = sec_axis(~ . * factor, name = "Wastewater viral RNA, Mgc/p/d (red)", labels = comma)
) +
theme_minimal() +
labs(
x = "Date",
title = "ONS Infections and Wastewater Levels - Scotland",
color = NULL
) + theme(legend.position = "none") # Hide the legend
# Print the plot with the adjusted axes
print(p)
#model
iter <- 1000
model_frame <- combined_data
model_frame <- model_frame %>% mutate(Wastewater_lag = lag(Wastewater7daysip, n = 7))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Wastewater_lag ~ model_frame$ONSinfections7daysip)
model <- bsts(Wastewater_lag ~ ONSinfections7daysip, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
model_frame$coeffs <- apply(model$dynamic.regression.coefficients, c(3), mean) * 1000000
#model_frame$coeffs <- rollapply(model_frame$coeffs, width = 21, FUN = mean, na.rm = TRUE, align = 'right', fill = NA)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
scale_y_log10() +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d - log scale", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
theme_minimal() +
scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
model_frame
q <- ggplot(model_frame, aes(x = Date, y = coeffs)) +
geom_line(colour = "red") +
theme_minimal() +
#scale_x_date(limits = c(min(model_frame$Date), as.Date("2024-01-01"))) +
labs(x = "Date", y = "gc/p/d", title = "Coefficient estimating Scotland wastewater output per infection")
# Print the plot
print(q)
